// Adresses
pub const ADDR_CHIP_ID: u8 = 0xd0;
pub const ADDR_SOFT_RESET: u8 = 0xe0;
pub const ADDR_REG_COEFF1: u8 = 0x8a;
pub const ADDR_REG_COEFF2: u8 = 0xe1;
pub const ADDR_REG_COEFF3: u8 = 0x00;
pub const ADDR_CONFIG: u8 = 0x71;
pub const ADDR_CONTROL_MODE: u8 = 0x74;
// BME680/BME688
pub const ADDR_VARIANT_ID: u8 = 0xF0;
// config addresses ctrl_gas_1, ctrl_hum, placeholder, ctrl_meas, config
pub const ADDRS_CONFIG: [u8; 5] = [0x71, 0x72, 0x73, 0x74, 0x75];
// gas wait time for profile 0
pub const ADDR_GAS_WAIT_0: u8 = 0x64;
// target temperature for profile 0
pub const ADDR_RES_HEAT_0: u8 = 0x5a;
pub const ADDR_SENSOR_RESULT: u8 = 0x1D;

// Commands
pub const CMD_SOFT_RESET: u8 = 0xB6;
// Constants
pub const CHIP_ID: u8 = 0x61;
pub const DELAY_PERIOD_US: u32 = 10000;
pub const MAX_HEATER_WAIT_DURATION_MS: u16 = 0xfc0;
pub const MAX_HEATER_TEMPERATURE: u16 = 400;

// Length
pub const LEN_COEFF_ALL: usize = 42;
pub const LEN_COEFF1: usize = 23;
pub const LEN_COEFF2: usize = 14;
#[allow(unused)] // Needed for tests.
pub const LEN_COEFF3: usize = 5;
pub const LEN_CONFIG: usize = 5;

// Magic values
// time in micro seconds
// #https://github.com/BoschSensortec/BME68x-Sensor-API/blob/master/bme68x.c#L521
pub const CYCLE_DURATION: u32 = 1963;
pub const TPH_SWITCHING_DURATION: u32 = 477 * 4;
pub const GAS_MEAS_DURATION: u32 = 477 * 5;
pub const WAKEUP_DURATION: u32 = 1000; // 1ms

// using float values from the reference implementation
pub const GAS_ARRAY_1: [f32; 16] = [
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, -0.8, 0.0, 0.0, -0.2, -0.5, 0.0, -1.0, 0.0, 0.0,
];
pub const GAS_ARRAY_2: [f32; 16] = [
    0.0, 0.0, 0.0, 0.0, 0.1, 0.7, 0.0, -0.8, -0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
];

#[cfg(test)]
mod tests {
    use super::{ADDR_CHIP_ID, CHIP_ID};

    const MEMORY_DUMP: [u8; 0xFF] = [
        0x1e, 0xaa, 0x16, 0xce, 0x3, 0xff, 0x24, 0xa, 0x0, 0x0, 0x1, 0x0, 0xe, 0x0, 0x2, 0x4, 0x10,
        0x0, 0x40, 0x0, 0x80, 0x0, 0x1e, 0x0, 0x1f, 0x7f, 0x1f, 0x10, 0x0, 0x0, 0x0, 0x80, 0x0,
        0x0, 0x80, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x0, 0x80, 0x0,
        0x0, 0x80, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x0, 0x80, 0x0,
        0x0, 0x80, 0x0, 0x0, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x4, 0x0, 0x4, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0xf, 0x4, 0xfe, 0x16, 0x9b, 0x8, 0x0, 0xff, 0x7f, 0x4f, 0x89, 0x4a, 0x51, 0x3b, 0x68, 0x6,
        0xb3, 0x80, 0x28, 0x68, 0x3, 0xf0, 0x3f, 0x92, 0xb4, 0xd7, 0x58, 0x0, 0xed, 0x28, 0xcc,
        0xfe, 0x3e, 0x1e, 0x0, 0x0, 0xd8, 0xeb, 0xe0, 0xf9, 0x1e, 0x86, 0xbd, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x33, 0x0, 0x0, 0xc0, 0x0, 0x54, 0x0, 0x0, 0x0, 0x0, 0x60, 0x2,
        0x0, 0x1, 0x0, 0x57, 0x1f, 0x60, 0x3, 0x0, 0x0, 0x0, 0x0, 0xff, 0xf, 0x0, 0x0, 0x0, 0x0,
        0x11, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x4, 0x10, 0x40, 0x0, 0x0, 0x3d, 0xd1, 0x37, 0x0, 0x2d, 0x14, 0x78, 0x9c, 0x56, 0x65,
        0x7c, 0xdc, 0xbb, 0x12, 0x57, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x80, 0x0,
        0x0, 0x80, 0x0,
    ];
    #[test]
    fn test_memory() {
        assert!(MEMORY_DUMP[ADDR_CHIP_ID as usize] == CHIP_ID);
    }
}
